#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.61)
AC_INIT(RDPMgr, 2.0, oliviers.open.source.softwares@gmail.com)
AM_INIT_AUTOMAKE([dist-bzip2])
AC_CONFIG_SRCDIR([main.cpp])
AC_CONFIG_HEADER([config.h])

# Checks for programs.
AC_PROG_CC
AC_PROG_MAKE_SET
AC_PROG_INSTALL
AC_PROG_CXX

# Checks for libraries.
AC_CHECK_LIB(pthread,pthread_create)
AC_CHECK_LIB(dbgflags,registerDebugFlags)
AC_CHECK_LIB(rt,mq_open)
#AC_CHECK_LIB(TAO,mq_open)
#AC_CHECK_LIB(ACE,mq_open)
#AC_CHECK_LIB(TAO_PortableServer,mq_open)
#AC_CHECK_LIB(TAO_CosNaming,mq_open)


# Checks for header files.
AC_HEADER_STDC
AC_HEADER_TIME
AC_HEADER_DIRENT
AC_HEADER_STDBOOL
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS([malloc.h stdlib.h string.h unistd.h mqueue.h fcntl.h dbgflags/dbgflags.h dbgflags/loggers.h dbgflags/syslogex.h sys/time.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_TYPE_SSIZE_T

# debug
AC_ARG_ENABLE(debug,
        [AS_HELP_STRING([--enable-debug Enable debug mode (default is no)])],
        [case "${enableval}" in
         yes) enable_debug="yes";;
          no) enable_debug="no" ;;
           *) AC_MSG_ERROR(bad value ${enableval} for --enable-debug) ;;
         esac],
        [enable_debug="no"]
)
if test "$enable_debug" = "yes"; then
        AC_DEFINE(_DEBUG_, 1, [Defined if debug mode is enabled (its easier to check).])
        #CFLAGS="$CFLAGS -O0 -ggdb3"
fi
if test "$enable_debug" = "no"; then
        AC_DEFINE(NDEBUG, 1, [Defined if debug mode is disabled.])
fi

AC_ARG_ENABLE(CORBA-kind,
              AS_HELP_STRING([--enable-CORBA-kind],[enable use of the kind attribut in CORBA Naming Service (default is yes)]),
	      [case "${enableval}" in
	       yes) enable_CORBA_kind="yes";;
	        no) enable_CORBA_kind="no";;
		 *) AC_MSG_ERROR(bad value ${enableval} for --enable-CORBA-kind) ;;
	       esac],
	       [enable_CORBA_kind="yes"]
)
if test "$enable_CORBA_kind" = "no"; then
   AC_DEFINE(DISABLE_CORBA_NS_KIND,1,[Definable if the CORBA Naming Service Kind attribut must be empty.])
fi

AC_ARG_WITH([TAO-include-path],
  [AS_HELP_STRING([--with-TAO-include-path=DIR],[location of the TAO headers, defaults to (/usr/include)])],
  [TAO_CPPFLAGS="-I$withval"],
  [TAO_CPPFLAGS=""])
AC_SUBST(TAO_CPPFLAGS)

AC_ARG_WITH([TAO-libs-path],
  [AS_HELP_STRING([--with-TAO-libs-path=DIR],[location of the TAO libraries, defaults to (/usr/lib)])],
  [TAO_LIBS="-L$withval"],
  [TAO_LIBS=""])
AC_SUBST(TAO_LIBS)  
  
AC_ARG_ENABLE(XWindows-Management,
              AS_HELP_STRING([--enable-XWindows-Management],[enable use of the X11 Windows management to hide the process'root window (default is yes)]),
	      [case "${enableval}" in
	       yes) enable_X11_Mgnt="yes";;
	        no) enable_X11_Mgnt="no";;
		 *) AC_MSG_ERROR(bad value ${enableval} for --enable-XWindows-Management) ;;
	       esac],
	       [enable_X11_Mgnt="yes"]
)

AM_CONDITIONAL(X11_ENABLED,[test x$enable_X11_Mgnt = xyes])

if test "$enable_X11_Mgnt" = "yes"; then
   #AC_PATH_X
   AC_CHECK_HEADERS([X11/Xlib.h X11/Xutil.h])
   #AC_CHECK_LIB(X11,pthread_create)
   AC_DEFINE(ENABLE_X11_MANAGEMENT,1,[Defined if X11 Windows Management mode is enabled])
fi

# Checks for library functions.
AC_FUNC_ERROR_AT_LINE
AC_FUNC_FORK
AC_FUNC_MALLOC
AC_FUNC_CLOSEDIR_VOID
AC_CHECK_FUNCS([ftruncate memset strchr strdup strncasecmp strtol strtoul gethostname gettimeofday strcasecmp])

AC_CONFIG_FILES([Makefile])
AC_OUTPUT
